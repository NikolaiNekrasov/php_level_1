<?php 

$x = true; //1
$y = false; //0

$z = !($x && !$y) || (!$x && !$y);

$z1 = !($x && !$y);
$z2 = (!$x || !$y);
$z3 = $z1 || $z2;


echo '$z = ' . (int)$z . '<br>';
echo '$z1 = ' . (int)$z1 . '<br>';
echo '$z2 = ' . (int)$z2 . '<br>';
echo '$z3 = ' . (int)$z3 . '<br>';

// ДЗ: Почему $z = false  Ответ: Я думаю что в выражении $z = !($x && !$y) || (!$x && !$y) сначала выполняется оператор или (||) ин он выдает true,  а потом выполняется оператор не (!) и в итоге $z = false

// --- // 
$a = 5; $b = '05'; 
var_dump($a == $b);// Почему true? // Интерпритатор PHP приводет обе переменные к числовому значению 5, поэтому при сравнение true //

 var_dump((int)'012345'); // Почему 12345? // оператор int приводит значение к целому числу, поэтому убирает первый ноль // 
 
 var_dump((float)123.0 === (int)123.0); // Почему false? // применяется строгое сравнение, при этом указаны разные типы данных(float и  int)// 
 
 var_dump((int)0 === (int)'hello, world'); // Почему true? //Оператор int  приводит строку к целому числу, т.к. в ней нет цифр то получается 0, соответственно  в итоге true  //



//5. *Используя только две переменные, поменяйте их значение местами. Например, если a1 = 1, b1 = 2, надо, чтобы получилось: b1 = 1, a1 = 2. Дополнительные переменные использовать нельзя.

$a1 =1;
$b1 = 2;
echo '<br>' . '$a1=' . $a1. ' '  . '$b1=' . $b1 . '<br>';
$b1 = $a1 + $b1; // $a1 = 1 $b1 = 3
$a1 = $a1 - $b1; // $a1 = -2 $b1 = 3
$a1 = -$a1; // $a1 = 2
$b1 = $b1 - $a1; // $b1 = 1 

echo '$a1=' . $a1 . ' ' . '$b1=' . $b1;





?>